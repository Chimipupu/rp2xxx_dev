/**
 * @file common.hpp
 * @author „Å°„Åø/ChimiÔºàhttps://github.com/ChimipupuÔºâ
 * @brief RP2040„ÅÆË©ï‰æ°„Éó„É≠„Ç∞„É©„É†Áî® ÂÖ±ÈÄö„Éò„ÉÉ„ÉÄ„Éº
 * @version 0.1
 * @date 2024-10-16
 * 
 * @copyright Copyright (c) 2024
 * 
 */

#ifndef COMMON_HPP
#define COMMON_HPP

#include <Arduino.h>
#include <stdint.h>
#include "pico/stdlib.h"
#include "rp2040_reg.hpp"

extern "C"
{
    static inline void NOP(void)
    {
        asm volatile("nop");
    }
}

// WDT „Ç¶„Ç©„ÉÉ„ÉÅ„Éâ„ÉÉ„ÇØ„Çø„Ç§„ÉûÈñ¢ÈÄ£
// #define __WDT_ENABLE__
#define WDT_TIME_OUT        6 * 1000 // WDT OVF„ÅßÁï™Áä¨„Çè„Çì„Çè„Çìüê∂
#ifdef __WDT_ENABLE__
#define WDT_TOGGLE          watchdog_update
#else
#define WDT_TOGGLE          NOP
#endif /* __WDT_ENABLE__ */

/***********************************/
//          FreeRTOSÈñ¢ÈÄ£
/***********************************/
#define __FREERTOS_USE__
#ifdef __FREERTOS_USE__

#include <FreeRTOS.h>
#include <task.h>
#include <semphr.h>

// Ââ≤Ëæº„Åø„Éû„Çπ„ÇØ„ÉªË®±ÂèØ
#define __DI            vTaskEnterCritical
#define __EI            vTaskExitCritical
#define __DI_ISR        taskENTER_CRITICAL_FROM_ISR
#define __EI_ISR        taskEXIT_CRITICAL_FROM_ISR

// FreeRTOSÁî®„ÅÆprintf
#define DEBUG_PRINTF_RTOS   safeSerialPrintf

extern SemaphoreHandle_t xSerialMutex;

extern "C"
{
    static inline void safeSerialPrintf(const char *format, ...)
    {
        if (xSemaphoreTake(xSerialMutex, portMAX_DELAY) == pdTRUE) {
            va_list args;
            va_start(args, format);

            for (const char *p = format; *p != '\0'; p++) {
                if (*p == '%') {
                    p++;  // '%'„ÅÆÊ¨°„ÅÆÊñáÂ≠ó„ÇíË¶ã„Çã
                    int width = 0;
                    int precision = -1;

                    // ÂπÖ„ÅÆÂèñÂæó
                    while (*p >= '0' && *p <= '9') {
                        width = width * 10 + (*p - '0');
                        p++;
                        WDT_TOGGLE;
                    }

                    // Á≤æÂ∫¶„ÅÆÂèñÂæó
                    if (*p == '.') {
                        p++;
                        precision = 0;
                        while (*p >= '0' && *p <= '9') {
                            precision = precision * 10 + (*p - '0');
                            p++;
                        }
                    }

                    // „Éï„Ç©„Éº„Éû„ÉÉ„ÉàÊåáÂÆöÂ≠ê„Å´Âü∫„Å•„ÅÑ„Å¶Âá¶ÁêÜ
                    switch (*p) {
                        case 'd':  // Êï¥Êï∞
                            Serial.print(va_arg(args, int));
                            break;
                        case 'f':  // ÊµÆÂãïÂ∞èÊï∞ÁÇπÊï∞ÔºàfloatÔºâ
                        case 'l':  // 'l' „ÅØÁÑ°Ë¶ñ
                        case 'F':  // ÊµÆÂãïÂ∞èÊï∞ÁÇπÊï∞Ôºàfloat„ÄÅÂ§ßÊñáÂ≠óÔºâ
                            Serial.print(va_arg(args, double), (precision >= 0) ? precision : 2);
                            break;
                        case 's':  // ÊñáÂ≠óÂàó
                            Serial.print(va_arg(args, char*));
                            break;
                        case 'c':  // ÊñáÂ≠ó
                            Serial.print((char)va_arg(args, int));
                            break;
                        case 'x':  // 16ÈÄ≤Êï∞ÔºàÂ∞èÊñáÂ≠óÔºâ
                        case 'X':  // 16ÈÄ≤Êï∞ÔºàÂ§ßÊñáÂ≠óÔºâ
                            Serial.print(va_arg(args, int), HEX);
                            break;
                        default:  // ‰ªñ„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÊåáÂÆöÂ≠ê„ÅØ„Åù„ÅÆ„Åæ„ÅæË°®Á§∫
                            Serial.print(*p);
                            break;
                    }
                } else if (*p == '\r' || *p == '\n') {
                    // ÊîπË°å„Ç∑„Éº„Ç±„É≥„Çπ„ÅÆÂá¶ÁêÜ
                    Serial.println(); // ÊîπË°å
                } else {
                    // '%'„Åß„Å™„ÅÑÊñáÂ≠ó„ÅØ„Åù„ÅÆ„Åæ„ÅæË°®Á§∫
                    Serial.print(*p);
                }
                WDT_TOGGLE;
            }
            va_end(args);
            xSemaphoreGive(xSerialMutex);
        } else {
            Serial.println("Failed to acquire mutex!");
            WDT_TOGGLE;
        }
    }
}
#endif /* __FREERTOS_USE__ */
/***********************************/

// typedef enum {
//     CPU_CORE_0 = 0x00,
//     CPU_CORE_1,
//     CPU_CORE_UNKNOWN = 0xFF
// } E_CPU_CORE;

#define DUAL_CORE_BUILD

// Use Pin Define
#define RGBLED_PIN          23   // GPIO 23
#define BUTTON_PIN          24   // GPIO 24
#define OB_LED_PIN          25   // GPIO 25
#define I2C_SDA             6    // GPIO 6
#define I2C_SCL             7    // GPIO 7

#define core0_init          setup
#define core0_main          loop
#define core1_init          setup1
#define core1_main          loop1
#define DEBUG_PRINT         Serial.print
#define DEBUG_PRINTLN       Serial.println
#ifdef __FREERTOS_USE__
#define DEBUG_PRINTF        safeSerialPrintf
#else
#define DEBUG_PRINTF        Serial.printf
#endif /* __FREERTOS_USE__ */
#define DEBUG_PRINT_INIT    Serial.begin

#define SW_DELAY_MS         delay

#define GPIO_PORT_DIR       pinMode
#define GPIO_OUTPUT         digitalWrite

#define ON                  0x00    // ON ... Active Low
#define OFF                 0x01

// I2C„Çπ„É¨„Éº„Éñ
#define QMC5883_I2C_ADDR    0x0D  // HMC5883„ÅÆ„Éë„ÉÅ„É¢„É≥
#define HMC5883_I2C_ADDR    0x1E
#define MPU9250_I2C_ADDR    0x68
#define MPU6050_I2C_ADDR    0x69  // ADO„Éî„É≥„ÇíHIGH = 0x69(Low/HiZ = 0x68)
#define OLED_I2C_ADDR       0x3C

extern "C"
{
    static inline void GPIO_TOGGLE(uint8_t port)
    {
        static bool s_port_val = OFF;

        GPIO_OUTPUT(port, s_port_val);
        s_port_val = !s_port_val;
    }
} /* extern "C" */

#endif /* COMMON_HPP */